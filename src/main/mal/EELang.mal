/*
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#id: "org.mal-lang.eelang"
#version: "0.0.1"
#Davide Savarro, 2023

category ComputeResources {

        abstract asset Machine {

            | internetAccessibleDevice
                -> modifyControllerTasking

			| modifyControllerTasking
                -> installMalware

            | installMalware

            | unsecuredCredentials
                -> modifyAuthenticationProcess

            | modifyAuthenticationProcess
                -> network.accessSecured,
				   app.trustModification

        }

        abstract asset Application {

			| trustModification

        }
}

category Functional {

        asset Substation {

        }

        asset DistributedEnergyResource {

        }

        asset PowerSystem {

			| unstablePowerSystem

        }
}

category Product {

        asset IED extends Machine {

            | installMalware
                -> powerSystem.unstablePowerSystem

        }

        asset SCADA extends Machine {

		}

		asset MMSClient extends Application {

        }

		asset MMSServer extends Application {

		    | unauthorizedCommandMessage
                 -> powerSystem.unstablePowerSystem

        }
}

category Communication {

        asset Network {

			| access
			     ->  channel.attemptNetworkSniffing,
                     channel.attemptAdversaryInTheMiddle

            | accessSecured
                 -> channel.attemptNetworkSniffing,
                    channel.attemptAdversaryInTheMiddle,
                    channel[SecureChannel].attemptAdversaryInTheMiddleOverTLS
        }

        asset Channel {
            | attemptNetworkSniffing
                 -> networkSniffing

            | attemptAdversaryInTheMiddle
                 -> adversaryInTheMiddle

            & networkSniffing
        		 -> dataflow.read

			& adversaryInTheMiddle [Exponential(1)]
				 -> dataflow.read,
					dataflow.write,
					dataflow.delete

        }

        asset SecureChannel extends Channel {

            | attemptAdversaryInTheMiddleOverTLS
                 -> adversaryInTheMiddleOverTLS

            & adversaryInTheMiddleOverTLS [Exponential(2)]
                 -> dataflow.read,
                    dataflow.write,
                    dataflow.delete,
                    mmsServer.unauthorizedCommandMessage

            # tls [Enabled]
                 -> networkSniffing,
                    adversaryInTheMiddle
        }

        asset Dataflow {

            | read

			| write

			| delete

        }

}

associations {

	Machine [machine] 1 <-- Executes --> * [app] Application
	Machine [machine] * <-- Connects --> 1 [network] Network

    Machine [machine] * <-- In --> 1 [powerSystem] PowerSystem
    Application [app] * <-- In --> 1 [powerSystem] PowerSystem

    IED [ied] 1 <-- Executes --> * [mmsServer] MMSServer
    SCADA [scada] 1 <-- Executes --> * [mmsClient] MMSClient
    Channel [channel] * <-- Crosses --> 1..* [network] Network
    Channel [channel] 1 <-- Contains --> 1 [dataflow] Dataflow

    Channel [channel] 1 <-- Client --> 1 [mmsClient] MMSClient
    Channel [channel] 1 <-- Server --> 1 [mmsServer] MMSServer

}
